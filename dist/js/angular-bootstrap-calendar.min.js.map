{"version":3,"sources":["angular-bootstrap-calendar.js","services/calendarTitle.js","services/calendarHelper.js","services/calendarDebounce.js","services/calendarConfig.js","filters/truncateEventTitle.js","filters/eventCountBadgeTotal.js","filters/calendarLimitTo.js","directives/mwlDateModifier.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","angular","module","constant","moment","factory","weekTitleLabel","day","currentDay","month","format","calendarConfig","titleFormats","week","replace","year","eventEnd","eventStart","eventIsInPeriod","periodStart","periodEnd","getEventsInPeriod","startPeriod","allEvents","filter","ends_at","endPeriod","isAfter","isBefore","isSame","calendarDate","period","getWeekDayNames","startOf","weekdays","endOf","count","event","starts_at","getYearView","view","eventsInPeriod","dateFormats","weekDay","events","label","isToday","clone","date","startOfMonth","endOfMonthView","today","monthEvents","inMonth","isFuture","isWeekend","isPast","indexOf","add","getWeekView","endOfWeek","days","length","weekDayLabel","dayCounter","dayLabel","eventsSorted","offset","startOfWeek","map","span","diff","weekViewStart","weekViewEnd","daySpan","dayOffset","calendarStart","calendarEnd","buckets","dayStartHour","dayEndHour","dayHeight","calendarHeight","dayHeightMultiplier","toDate","top","height","diffStart","forEach","bucket","canFitInThisBucket","cannotFitInABucket","getMonthView","bucketIndex","bucketItem","push","left","getDayView","service","args","$timeout","debounce","immediate","timeout","context","this","arguments","callNow","cancel","apply","later","wait","func","hour","provider","defaultTitleFormats","i18nStrings","eventsLabel","timeLabel","configProvider","formats","extend","defaultDateFormats","strings","$get","string","boxHeight","substr","incrementsBadgeTotal","limit","begin","Infinity","Math","abs","input","Number","toString","isNaN","slice","directive","max","restrict","controller","$element","isDefined","$scope","$attrs","setToToday","$apply","Date","increment","onClick","decrement","unbind","subtract","bind","$on","scope","$injector","has","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","unbindDestroy","addClass","removeClass","templateUrl","onEventClick","onEditEventClick","require","onDeleteEventClick","deleteEventHtml","autoOpen","onTimespanClick","editEventHtml","calendarHelper","eventCountBadgeTotalFilter","vm","firstRun","monthClicked","monthClickedFirstRun","openEvents","openRowIndex","floor","monthIndex","attrs","calendarCtrl","controllerAs","$sce","isOpen","isMonthView","link","elm","ctrls","monthOffsets","weekDays","rows","i","dayClicked","dayClickedFirstRun","highlightEvent","dayIndex","monthDay","highlightClass","shouldAddClass","dayContainsEvent","type","dayViewStart","dayViewEnd","dayViewSplit","parseInt","originalLocale","locale","updateDays","hours","onDrillDownClick","drillDown","calendarTitle","calendarDebounce","nextView","changeView","newDay","calendarNextView","refreshCalendar","viewTitle","unbindLocaleWatcher","unbindOnDestroy","unbindDestroyListener"],"mappings":"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","file":"angular-bootstrap-calendar.min.js","sourcesContent":["/**\n * angular-bootstrap-calendar - A pure AngularJS bootstrap themed responsive calendar that can display events and has views for year, month, week and day\n * @version v0.9.2\n * @link https://github.com/mattlewis92/angular-bootstrap-calendar\n * @license MIT\n */\n(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    'use strict';\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarTitle', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            function day(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.day);\n            }\n            function week(currentDay) {\n                var weekTitleLabel = calendarConfig.titleFormats.week;\n                return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n            }\n            function month(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.month);\n            }\n            function year(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.year);\n            }\n            return {\n                day: day,\n                week: week,\n                month: month,\n                year: year\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarHelper', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventEnd);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            }\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                });\n            }\n            function getWeekDayNames() {\n                var weekdays = [];\n                var count = 0;\n                while (count < 7) {\n                    weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            }\n            function getYearView(events, currentDay) {\n                var view = [];\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                var month = moment(currentDay).startOf('year');\n                var count = 0;\n                while (count < 12) {\n                    var startPeriod = month.clone();\n                    var endPeriod = startPeriod.clone().endOf('month');\n                    view.push({\n                        label: startPeriod.format(calendarConfig.dateFormats.month),\n                        isToday: startPeriod.isSame(moment().startOf('month')),\n                        events: eventsInPeriod.filter(function (event) {\n                            return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                        }),\n                        date: startPeriod\n                    });\n                    month.add(1, 'month');\n                    count++;\n                }\n                return view;\n            }\n            function getMonthView(events, currentDay) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var startOfMonth = moment(currentDay).startOf('month');\n                var day = startOfMonth.clone().startOf('week');\n                var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n                var view = [];\n                var today = moment().startOf('day');\n                while (day.isBefore(endOfMonthView)) {\n                    var inMonth = day.month() === moment(currentDay).month();\n                    var monthEvents = [];\n                    if (inMonth) {\n                        monthEvents = eventsInPeriod.filter(function (event) {\n                            return eventIsInPeriod(event.starts_at, event.ends_at, day, day.clone().endOf('day'));\n                        });\n                    }\n                    view.push({\n                        label: day.date(),\n                        date: day.clone(),\n                        inMonth: inMonth,\n                        isPast: today.isAfter(day),\n                        isToday: today.isSame(day),\n                        isFuture: today.isBefore(day),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(day.day()) > -1,\n                        events: monthEvents\n                    });\n                    day.add(1, 'day');\n                }\n                return view;\n            }\n            function getWeekView(events, currentDay) {\n                var startOfWeek = moment(currentDay).startOf('week');\n                var endOfWeek = moment(currentDay).endOf('week');\n                var dayCounter = startOfWeek.clone();\n                var days = [];\n                var today = moment().startOf('day');\n                while (days.length < 7) {\n                    days.push({\n                        weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n                        date: dayCounter.clone(),\n                        dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n                        isPast: dayCounter.isBefore(today),\n                        isToday: dayCounter.isSame(today),\n                        isFuture: dayCounter.isAfter(today),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(dayCounter.day()) > -1\n                    });\n                    dayCounter.add(1, 'day');\n                }\n                var eventsSorted = events.filter(function (event) {\n                    return eventIsInPeriod(event.starts_at, event.ends_at, startOfWeek, endOfWeek);\n                }).map(function (event) {\n                    var eventStart = moment(event.starts_at).startOf('day');\n                    var eventEnd = moment(event.ends_at).startOf('day');\n                    var weekViewStart = moment(startOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    days: days,\n                    events: eventsSorted\n                };\n            }\n            function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n                var dayHeightMultiplier = dayHeight / 60;\n                var buckets = [];\n                return eventsInPeriod.filter(function (event) {\n                    return eventIsInPeriod(event.starts_at, event.ends_at, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                }).map(function (event) {\n                    if (moment(event.starts_at).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier - 2;\n                    }\n                    if (moment(event.ends_at).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.starts_at;\n                        if (moment(event.starts_at).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) || eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            }\n            return {\n                getWeekDayNames: getWeekDayNames,\n                getYearView: getYearView,\n                getMonthView: getMonthView,\n                getWeekView: getWeekView,\n                getDayView: getDayView\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').service('calendarDebounce', [\n        '$timeout',\n        function ($timeout) {\n            function debounce(func, wait, immediate) {\n                var timeout;\n                return function () {\n                    var context = this, args = arguments;\n                    var later = function () {\n                        timeout = null;\n                        if (!immediate) {\n                            func.apply(context, args);\n                        }\n                    };\n                    var callNow = immediate && !timeout;\n                    $timeout.cancel(timeout);\n                    timeout = $timeout(later, wait);\n                    if (callNow) {\n                        func.apply(context, args);\n                    }\n                };\n            }\n            return debounce;\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            weekDay: 'dddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var i18nStrings = {\n            eventsLabel: 'Events',\n            timeLabel: 'Time'\n        };\n        var configProvider = this;\n        configProvider.setDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.setTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.setI18nStrings = function (strings) {\n            angular.extend(i18nStrings, strings);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats,\n                i18nStrings: i18nStrings\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('truncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('eventCountBadgeTotal', function () {\n        return function (events) {\n            return events.filter(function (event) {\n                return event.incrementsBadgeTotal !== false;\n            }).length;\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarLimitTo', function () {\n        //Copied from the angular source. Only 1.4 has the begin functionality.\n        return function (input, limit, begin) {\n            if (Math.abs(Number(limit)) === Infinity) {\n                limit = Number(limit);\n            } else {\n                limit = parseInt(limit);\n            }\n            if (isNaN(limit)) {\n                return input;\n            }\n            if (angular.isNumber(input)) {\n                input = input.toString();\n            }\n            if (!angular.isArray(input) && !angular.isString(input)) {\n                return input;\n            }\n            begin = !begin || isNaN(begin) ? 0 : parseInt(begin);\n            begin = begin < 0 && begin >= -input.length ? input.length + begin : begin;\n            if (limit >= 0) {\n                return input.slice(begin, begin + limit);\n            } else {\n                if (begin === 0) {\n                    return input.slice(limit, input.length);\n                } else {\n                    return input.slice(Math.max(0, begin + limit), begin);\n                }\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlDateModifier', function () {\n        return {\n            restrict: 'A',\n            controller: [\n                '$element',\n                '$attrs',\n                '$scope',\n                'moment',\n                function ($element, $attrs, $scope, moment) {\n                    function onClick() {\n                        if (angular.isDefined($attrs.setToToday)) {\n                            $scope.date = new Date();\n                        } else if (angular.isDefined($attrs.increment)) {\n                            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n                        } else if (angular.isDefined($attrs.decrement)) {\n                            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n                        }\n                        $scope.$apply();\n                    }\n                    $element.bind('click', onClick);\n                    $scope.$on('$destroy', function () {\n                        $element.unbind('click', onClick);\n                    });\n                }\n            ],\n            scope: {\n                date: '=',\n                increment: '=',\n                decrement: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', function () {\n        return {\n            templateUrl: 'src/templates/calendarYearView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'eventCountBadgeTotalFilter',\n                function ($scope, moment, calendarHelper, eventCountBadgeTotalFilter) {\n                    var vm = this;\n                    var firstRun = true;\n                    vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (month) {\n                                if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                                    vm.monthClicked(month, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.monthClicked = function (month, monthClickedFirstRun) {\n                        if (!monthClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: month.date.toDate() });\n                        }\n                        vm.openEvents = month.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var monthIndex = vm.view.indexOf(month);\n                            vm.openRowIndex = Math.floor(monthIndex / 4);\n                        }\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'src/templates/calendarWeekView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'calendarHelper',\n                function ($scope, calendarHelper) {\n                    var vm = this;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'src/templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$sce',\n                function ($scope, $sce) {\n                    var vm = this;\n                    vm.$sce = $sce;\n                    var unbindWatcher = $scope.$watch('isOpen', function (isOpen) {\n                        vm.shouldCollapse = !isOpen;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            },\n            scope: {\n                isOpen: '=',\n                events: '=',\n                onEventClick: '=',\n                editEventHtml: '=',\n                onEditEventClick: '=',\n                deleteEventHtml: '=',\n                onDeleteEventClick: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'src/templates/calendarMonthView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'eventCountBadgeTotalFilter',\n                function ($scope, moment, calendarHelper, eventCountBadgeTotalFilter) {\n                    var vm = this;\n                    var firstRun = true;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.weekDays = calendarHelper.getWeekDayNames();\n                        vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n                        var rows = Math.floor(vm.view.length / 7);\n                        vm.monthOffsets = [];\n                        for (var i = 0; i < rows; i++) {\n                            vm.monthOffsets.push(i * 7);\n                        }\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (day) {\n                                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                                    vm.dayClicked(day, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                    vm.dayClicked = function (day, dayClickedFirstRun) {\n                        if (!dayClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: day.date.toDate() });\n                        }\n                        vm.view.forEach(function (monthDay) {\n                            monthDay.isOpened = false;\n                        });\n                        vm.openEvents = day.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var dayIndex = vm.view.indexOf(day);\n                            vm.openRowIndex = Math.floor(dayIndex / 7);\n                            day.isOpened = true;\n                        }\n                    };\n                    vm.highlightEvent = function (event, shouldAddClass) {\n                        vm.view.forEach(function (day) {\n                            delete day.highlightClass;\n                            if (shouldAddClass) {\n                                var dayContainsEvent = day.events.indexOf(event) > -1;\n                                if (dayContainsEvent) {\n                                    day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                }\n                            }\n                        });\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'src/templates/calendarDayView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                function ($scope, $timeout, moment, calendarHelper, calendarConfig) {\n                    var vm = this;\n                    var dayViewStart, dayViewEnd;\n                    vm.calendarConfig = calendarConfig;\n                    function updateDays() {\n                        dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                        dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                        vm.dayViewSplit = parseInt($scope.dayViewSplit);\n                        vm.dayHeight = 60 / $scope.dayViewSplit * 30;\n                        vm.days = [];\n                        var dayCounter = moment(dayViewStart);\n                        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                            vm.days.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                            dayCounter.add(1, 'hour');\n                        }\n                    }\n                    var originalLocale = moment.locale();\n                    $scope.$on('calendar.refreshView', function () {\n                        if (originalLocale !== moment.locale()) {\n                            originalLocale = moment.locale();\n                            updateDays();\n                        }\n                        vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.dayHeight);\n                    });\n                    updateDays();\n                }\n            ],\n            controllerAs: 'vm'\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'src/templates/calendar.html',\n            restrict: 'EA',\n            scope: {\n                events: '=',\n                view: '=',\n                viewTitle: '=',\n                currentDay: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onEventClick: '&',\n                onEditEventClick: '&',\n                onDeleteEventClick: '&',\n                onTimespanClick: '&',\n                onDrillDownClick: '&',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarTitle',\n                'calendarDebounce',\n                function ($scope, $timeout, moment, calendarTitle, calendarDebounce) {\n                    var vm = this;\n                    vm.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = newDay;\n                    };\n                    vm.drillDown = function (date) {\n                        var nextView = {\n                            'year': 'month',\n                            'month': 'day',\n                            'week': 'day'\n                        };\n                        if ($scope.onDrillDownClick({\n                                calendarDate: moment(date).toDate(),\n                                calendarNextView: nextView[$scope.view]\n                            }) !== false) {\n                            vm.changeView(nextView[$scope.view], date);\n                        }\n                    };\n                    //Use a debounce to prevent it being called 3 times on initialisation\n                    var refreshCalendar = calendarDebounce(function () {\n                        if (calendarTitle[$scope.view]) {\n                            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n                        }\n                        $scope.$broadcast('calendar.refreshView');\n                    }, 50);\n                    //Auto update the calendar when the locale changes\n                    var unbindLocaleWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, refreshCalendar);\n                    var unbindOnDestroy = [];\n                    unbindOnDestroy.push(unbindLocaleWatcher);\n                    //Refresh the calendar when any of these variables change.\n                    unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n                    //Remove any watchers when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindOnDestroy.forEach(function (unbind) {\n                            unbind();\n                        });\n                    });\n                    unbindOnDestroy.push(unbindDestroyListener);\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarTitle', function (moment, calendarConfig) {\n\n    function day(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.day);\n    }\n\n    function week(currentDay) {\n      var weekTitleLabel = calendarConfig.titleFormats.week;\n      return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n    }\n\n    function month(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.month);\n    }\n\n    function year(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.year);\n    }\n\n    return {\n      day: day,\n      week: week,\n      month: month,\n      year: year\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarHelper', function (moment, calendarConfig) {\n\n    function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventEnd);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    }\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n      });\n    }\n\n    function getWeekDayNames() {\n      var weekdays = [];\n      var count = 0;\n      while(count < 7) {\n        weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n      }\n      return weekdays;\n    }\n\n    function getYearView(events, currentDay) {\n\n      var view = [];\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n      var month = moment(currentDay).startOf('year');\n      var count = 0;\n      while (count < 12) {\n        var startPeriod = month.clone();\n        var endPeriod = startPeriod.clone().endOf('month');\n        view.push({\n          label: startPeriod.format(calendarConfig.dateFormats.month),\n          isToday: startPeriod.isSame(moment().startOf('month')),\n          events: eventsInPeriod.filter(function(event) {\n            return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n          }),\n          date: startPeriod\n        });\n\n        month.add(1, 'month');\n        count++;\n      }\n\n      return view;\n\n    }\n\n    function getMonthView(events, currentDay) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n      var startOfMonth = moment(currentDay).startOf('month');\n      var day = startOfMonth.clone().startOf('week');\n      var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n      var view = [];\n      var today = moment().startOf('day');\n      while (day.isBefore(endOfMonthView)) {\n\n        var inMonth = day.month() === moment(currentDay).month();\n        var monthEvents = [];\n        if (inMonth) {\n          monthEvents = eventsInPeriod.filter(function(event) {\n            return eventIsInPeriod(event.starts_at, event.ends_at, day, day.clone().endOf('day'));\n          });\n        }\n\n        view.push({\n          label: day.date(),\n          date: day.clone(),\n          inMonth: inMonth,\n          isPast: today.isAfter(day),\n          isToday: today.isSame(day),\n          isFuture: today.isBefore(day),\n          isWeekend: [0, 6].indexOf(day.day()) > -1,\n          events: monthEvents\n        });\n\n        day.add(1, 'day');\n      }\n\n      return view;\n\n    }\n\n    function getWeekView(events, currentDay) {\n\n      var startOfWeek = moment(currentDay).startOf('week');\n      var endOfWeek = moment(currentDay).endOf('week');\n      var dayCounter = startOfWeek.clone();\n      var days = [];\n      var today = moment().startOf('day');\n      while(days.length < 7) {\n        days.push({\n          weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n          date: dayCounter.clone(),\n          dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n          isPast: dayCounter.isBefore(today),\n          isToday: dayCounter.isSame(today),\n          isFuture: dayCounter.isAfter(today),\n          isWeekend: [0, 6].indexOf(dayCounter.day()) > -1\n        });\n        dayCounter.add(1, 'day');\n      }\n\n      var eventsSorted = events.filter(function(event) {\n        return eventIsInPeriod(event.starts_at, event.ends_at, startOfWeek, endOfWeek);\n      }).map(function(event) {\n\n        var eventStart = moment(event.starts_at).startOf('day');\n        var eventEnd = moment(event.ends_at).startOf('day');\n        var weekViewStart = moment(startOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n\n        return event;\n      });\n\n      return {days: days, events: eventsSorted};\n\n    }\n\n    function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n      var dayHeightMultiplier = dayHeight / 60;\n      var buckets = [];\n\n      return eventsInPeriod.filter(function(event) {\n        return eventIsInPeriod(\n          event.starts_at,\n          event.ends_at,\n          moment(currentDay).startOf('day').toDate(),\n          moment(currentDay).endOf('day').toDate()\n        );\n      }).map(function(event) {\n        if (moment(event.starts_at).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n        }\n\n        if (moment(event.ends_at).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.starts_at;\n          if (moment(event.starts_at).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) ||\n              eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    }\n\n    return {\n      getWeekDayNames: getWeekDayNames,\n      getYearView: getYearView,\n      getMonthView: getMonthView,\n      getWeekView: getWeekView,\n      getDayView: getDayView\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .service('calendarDebounce', function($timeout) {\n\n    function debounce(func, wait, immediate) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        var later = function() {\n          timeout = null;\n          if (!immediate) {\n            func.apply(context, args);\n          }\n        };\n        var callNow = immediate && !timeout;\n        $timeout.cancel(timeout);\n        timeout = $timeout(later, wait);\n        if (callNow) {\n          func.apply(context, args);\n        }\n      };\n    }\n\n    return debounce;\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      weekDay: 'dddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var i18nStrings = {\n      eventsLabel: 'Events',\n      timeLabel: 'Time'\n    };\n\n    var configProvider = this;\n\n    configProvider.setDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setI18nStrings = function(strings) {\n      angular.extend(i18nStrings, strings);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats,\n        i18nStrings: i18nStrings\n      };\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('truncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('eventCountBadgeTotal', function() {\n\n    return function(events) {\n\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarLimitTo', function() {\n\n    //Copied from the angular source. Only 1.4 has the begin functionality.\n    return function(input, limit, begin) {\n      if (Math.abs(Number(limit)) === Infinity) {\n        limit = Number(limit);\n      } else {\n        limit = parseInt(limit);\n      }\n      if (isNaN(limit)) {\n        return input;\n      }\n\n      if (angular.isNumber(input)) {\n        input = input.toString();\n      }\n      if (!angular.isArray(input) && !angular.isString(input)) {\n        return input;\n      }\n\n      begin = (!begin || isNaN(begin)) ? 0 : parseInt(begin);\n      begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;\n\n      if (limit >= 0) {\n        return input.slice(begin, begin + limit);\n      } else {\n        if (begin === 0) {\n          return input.slice(limit, input.length);\n        } else {\n          return input.slice(Math.max(0, begin + limit), begin);\n        }\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlDateModifier', function() {\n\n    return {\n      restrict: 'A',\n      controller: function($element, $attrs, $scope, moment) {\n\n        function onClick() {\n          if (angular.isDefined($attrs.setToToday)) {\n            $scope.date = new Date();\n          } else if (angular.isDefined($attrs.increment)) {\n            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n          } else if (angular.isDefined($attrs.decrement)) {\n            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n          }\n          $scope.$apply();\n        }\n\n        $element.bind('click', onClick);\n\n        $scope.$on('$destroy', function() {\n          $element.unbind('click', onClick);\n        });\n\n      },\n      scope: {\n        date: '=',\n        increment: '=',\n        decrement: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarYearView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper, eventCountBadgeTotalFilter) {\n\n        var vm = this;\n        var firstRun = true;\n\n        vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(month) {\n              if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                vm.monthClicked(month, true);\n              }\n            });\n          }\n        });\n\n        vm.monthClicked = function(month, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.onTimespanClick({calendarDate: month.date.toDate()});\n          }\n\n          vm.openEvents = month.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var monthIndex = vm.view.indexOf(month);\n            vm.openRowIndex = Math.floor(monthIndex / 4);\n          }\n\n        };\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarWeekView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, calendarHelper) {\n\n        var vm = this;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n        });\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'src/templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $sce) {\n\n        var vm = this;\n        vm.$sce = $sce;\n\n        var unbindWatcher = $scope.$watch('isOpen', function(isOpen) {\n          vm.shouldCollapse = !isOpen;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      controllerAs: 'vm',\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      },\n      scope: {\n        isOpen: '=',\n        events: '=',\n        onEventClick: '=',\n        editEventHtml: '=',\n        onEditEventClick: '=',\n        deleteEventHtml: '=',\n        onDeleteEventClick: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarMonthView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper, eventCountBadgeTotalFilter) {\n\n        var vm = this;\n        var firstRun = true;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.weekDays = calendarHelper.getWeekDayNames();\n\n          vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n          var rows = Math.floor(vm.view.length / 7);\n          vm.monthOffsets = [];\n          for (var i = 0; i < rows; i++) {\n            vm.monthOffsets.push(i * 7);\n          }\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(day) {\n              if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                vm.dayClicked(day, true);\n              }\n            });\n          }\n        });\n\n        vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        vm.dayClicked = function(day, dayClickedFirstRun) {\n\n          if (!dayClickedFirstRun) {\n            $scope.onTimespanClick({calendarDate: day.date.toDate()});\n          }\n\n          vm.view.forEach(function(monthDay) {\n            monthDay.isOpened = false;\n          });\n\n          vm.openEvents = day.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var dayIndex = vm.view.indexOf(day);\n            vm.openRowIndex = Math.floor(dayIndex / 7);\n            day.isOpened = true;\n          }\n\n        };\n\n        vm.highlightEvent = function(event, shouldAddClass) {\n\n          vm.view.forEach(function(day) {\n            delete day.highlightClass;\n            if (shouldAddClass) {\n              var dayContainsEvent = day.events.indexOf(event) > -1;\n              if (dayContainsEvent) {\n                day.highlightClass = 'day-highlight dh-event-' + event.type;\n              }\n            }\n          });\n\n        };\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarDayView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, $timeout, moment, calendarHelper, calendarConfig) {\n\n        var vm = this;\n        var dayViewStart, dayViewEnd;\n\n        vm.calendarConfig = calendarConfig;\n\n        function updateDays() {\n          dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n          dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n          vm.dayViewSplit = parseInt($scope.dayViewSplit);\n          vm.dayHeight = (60 / $scope.dayViewSplit) * 30;\n          vm.days = [];\n          var dayCounter = moment(dayViewStart);\n          for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n            vm.days.push({\n              label: dayCounter.format(calendarConfig.dateFormats.hour)\n            });\n            dayCounter.add(1, 'hour');\n          }\n        }\n\n        var originalLocale = moment.locale();\n\n        $scope.$on('calendar.refreshView', function() {\n\n          if (originalLocale !== moment.locale()) {\n            originalLocale = moment.locale();\n            updateDays();\n          }\n\n          vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.dayHeight);\n\n        });\n\n        updateDays();\n\n      },\n      controllerAs: 'vm'\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'src/templates/calendar.html',\n      restrict: 'EA',\n      scope: {\n        events: '=',\n        view: '=',\n        viewTitle: '=',\n        currentDay: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onEventClick: '&',\n        onEditEventClick: '&',\n        onDeleteEventClick: '&',\n        onTimespanClick: '&',\n        onDrillDownClick: '&',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, $timeout, moment, calendarTitle, calendarDebounce) {\n\n        var vm = this;\n\n        vm.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = newDay;\n        };\n\n        vm.drillDown = function(date) {\n\n          var nextView = {\n            'year': 'month',\n            'month': 'day',\n            'week': 'day'\n          };\n\n          if ($scope.onDrillDownClick({calendarDate: moment(date).toDate(), calendarNextView: nextView[$scope.view]}) !== false) {\n            vm.changeView(nextView[$scope.view], date);\n          }\n\n        };\n\n        //Use a debounce to prevent it being called 3 times on initialisation\n        var refreshCalendar = calendarDebounce(function() {\n          if (calendarTitle[$scope.view]) {\n            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n          }\n          $scope.$broadcast('calendar.refreshView');\n        }, 50);\n\n        //Auto update the calendar when the locale changes\n        var unbindLocaleWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, refreshCalendar);\n\n        var unbindOnDestroy = [];\n        unbindOnDestroy.push(unbindLocaleWatcher);\n\n        //Refresh the calendar when any of these variables change.\n        unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n\n        //Remove any watchers when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindOnDestroy.forEach(function(unbind) {\n            unbind();\n          });\n        });\n        unbindOnDestroy.push(unbindDestroyListener);\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}