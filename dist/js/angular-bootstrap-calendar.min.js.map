{"version":3,"sources":["angular-bootstrap-calendar.js","services/calendarHelper.js","services/calendarDebounce.js","services/calendarConfig.js","filters/truncateEventTitle.js","filters/eventCountBadgeTotal.js","filters/calendarLimitTo.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","angular","module","self","constant","moment","startOf","startPeriod","isISOWeekBasedOnLocale","starts_at","eventIsInPeriod","event","getEventsInPeriod","calendarDate","period","allEvents","getWeekDayNames","weekdays","endOf","count","filter","ends_at","endPeriod","this","eventStart","eventEnd","weekday","format","calendarConfig","dateFormats","weekDay","periodEnd","periodStart","eventsInPeriod","currentDay","isAfter","isBefore","isSame","getYearView","month","view","events","label","isToday","clone","date","startOfMonth","endOfMonthView","getMonthView","day","monthEvents","today","inMonth","isFuture","isWeekend","isPast","indexOf","add","getWeekView","columns","currentWeekDayIndex","beginningOfWeek","Array","weekDays","getDay","i","dateOffset","toDate","endOfWeek","eventsSorted","weekViewStart","offset","span","map","diff","weekViewEnd","daySpan","dayOffset","calendarStart","calendarEnd","getDayView","dayStartHour","dayEndHour","dayHeight","calendarHeight","dayHeightMultiplier","buckets","top","height","diffStart","forEach","bucket","canFitInThisBucket","cannotFitInABucket","bucketIndex","bucketItem","left","length","push","service","args","$timeout","debounce","immediate","timeout","context","arguments","callNow","cancel","apply","later","wait","func","hour","provider","defaultTitleFormats","week","year","configProvider","formats","extend","defaultDateFormats","titleFormats","$get","string","boxHeight","substr","incrementsBadgeTotal","limit","begin","Infinity","Math","abs","input","Number","toString","isNaN","slice","directive","max","controller","$injector","has","restrict","$scope","$attrs","$element","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","unbindDestroy","addClass","removeClass","$on","require","templateUrl","eventClick","eventEditClick","eventDeleteClick","scope","deleteEventHtml","autoOpen","timespanClick","editEventHtml","calendarHelper","eventCountBadgeTotalFilter","calendarDebounce","vm","firstRun","updateView","monthClicked","openEvents","openRowIndex","monthClickedFirstRun","floor","monthIndex","drillDown","calendarCtrl","changeView","attrs","controllerAs","link","element","replace","$sce","isOpen","isMonthView","elm","ctrls","isYearView","monthOffsets","dayClicked","monthDay","dayClickedFirstRun","dayIndex","highlightEvent","highlightClass","shouldAddClass","dayContainsEvent","type","eventLabel","timeLabel","dayViewEnd","dayViewSplit","dayViewStart","dayCounter","parseInt","hours","useIsoWeek","weekTitleLabel","titleFunctions","newDay","control","getTitle","subtract","next","firstRunWatcher","locale","dow","originalView","copy","unbindDestroyListener"],"mappings":"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","file":"angular-bootstrap-calendar.min.js","sourcesContent":["/**\n * angular-bootstrap-calendar - A pure AngularJS bootstrap themed responsive calendar that can display events and has views for year, month, week and day\n * @version v0.9.2\n * @link https://github.com/mattlewis92/angular-bootstrap-calendar\n * @license MIT\n */\n(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    'use strict';\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    angular.module('mwl.calendar').service('calendarHelper', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            var self = this;\n            function isISOWeekBasedOnLocale() {\n                return moment().startOf('week').day() === 1;\n            }\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                });\n            }\n            this.getWeekDayNames = function () {\n                var weekdays = [];\n                var count = 0;\n                while (count < 7) {\n                    weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            };\n            this.eventIsInPeriod = function (eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventEnd);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            };\n            this.getYearView = function (events, currentDay) {\n                var view = [];\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                var month = moment(currentDay).startOf('year');\n                var count = 0;\n                while (count < 12) {\n                    var startPeriod = month.clone();\n                    var endPeriod = startPeriod.clone().endOf('month');\n                    view.push({\n                        label: startPeriod.format(calendarConfig.dateFormats.month),\n                        isToday: startPeriod.isSame(moment().startOf('month')),\n                        events: eventsInPeriod.filter(function (event) {\n                            return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                        }),\n                        date: startPeriod\n                    });\n                    month.add(1, 'month');\n                    count++;\n                }\n                return view;\n            };\n            this.getMonthView = function (events, currentDay) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var startOfMonth = moment(currentDay).startOf('month');\n                var day = startOfMonth.clone().startOf('week');\n                var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n                var view = [];\n                var today = moment().startOf('day');\n                while (day.isBefore(endOfMonthView)) {\n                    var inMonth = day.month() === moment(currentDay).month();\n                    var monthEvents = [];\n                    if (inMonth) {\n                        monthEvents = eventsInPeriod.filter(function (event) {\n                            return self.eventIsInPeriod(event.starts_at, event.ends_at, day, day.clone().endOf('day'));\n                        });\n                    }\n                    view.push({\n                        label: day.date(),\n                        date: day.clone(),\n                        inMonth: inMonth,\n                        isPast: today.isAfter(day),\n                        isToday: today.isSame(day),\n                        isFuture: today.isBefore(day),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(day.day()) > -1,\n                        events: monthEvents\n                    });\n                    day.add(1, 'day');\n                }\n                return view;\n            };\n            this.getWeekView = function (events, currentDay) {\n                var dateOffset = isISOWeekBasedOnLocale() ? 1 : 0;\n                var columns = new Array(7);\n                var weekDays = self.getWeekDayNames();\n                var currentWeekDayIndex = currentDay.getDay();\n                var beginningOfWeek, endOfWeek, i, date;\n                for (i = currentWeekDayIndex; i >= 0; i--) {\n                    date = moment(currentDay).subtract(currentWeekDayIndex - i, 'days').add(dateOffset, 'day').toDate();\n                    columns[i] = {\n                        weekDay: weekDays[i],\n                        day: moment(date).format('D'),\n                        date: moment(date).format(calendarConfig.dateFormats.day),\n                        isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n                        isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n                        isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(date).day()) > -1\n                    };\n                    if (i === 0) {\n                        beginningOfWeek = date;\n                    } else if (i === 6) {\n                        endOfWeek = date;\n                    }\n                }\n                for (i = currentWeekDayIndex + 1; i < 7; i++) {\n                    date = moment(currentDay).add(i - currentWeekDayIndex, 'days').add(dateOffset, 'day').toDate();\n                    columns[i] = {\n                        weekDay: weekDays[i],\n                        day: moment(date).format('D'),\n                        date: moment(date).format(calendarConfig.dateFormats.day),\n                        isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n                        isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n                        isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(date).day()) > -1\n                    };\n                    if (i === 0) {\n                        beginningOfWeek = date;\n                    } else if (i === 6) {\n                        endOfWeek = date;\n                    }\n                }\n                endOfWeek = moment(endOfWeek).endOf('day').toDate();\n                beginningOfWeek = moment(beginningOfWeek).startOf('day').toDate();\n                var eventsSorted = events.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, beginningOfWeek, endOfWeek);\n                }).map(function (event) {\n                    var eventStart = moment(event.starts_at).startOf('day');\n                    var eventEnd = moment(event.ends_at).startOf('day');\n                    var weekViewStart = moment(beginningOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    columns: columns,\n                    events: eventsSorted\n                };\n            };\n            this.getDayView = function (events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n                var dayHeightMultiplier = dayHeight / 60;\n                var buckets = [];\n                return eventsInPeriod.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                }).map(function (event) {\n                    if (moment(event.starts_at).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier - 2;\n                    }\n                    if (moment(event.ends_at).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.starts_at;\n                        if (moment(event.starts_at).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) || self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').service('calendarDebounce', [\n        '$timeout',\n        function ($timeout) {\n            function debounce(func, wait, immediate) {\n                var timeout;\n                return function () {\n                    var context = this, args = arguments;\n                    var later = function () {\n                        timeout = null;\n                        if (!immediate) {\n                            func.apply(context, args);\n                        }\n                    };\n                    var callNow = immediate && !timeout;\n                    $timeout.cancel(timeout);\n                    timeout = $timeout(later, wait);\n                    if (callNow) {\n                        func.apply(context, args);\n                    }\n                };\n            }\n            return debounce;\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            weekDay: 'dddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var configProvider = this;\n        configProvider.configureDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.configureTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('truncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('eventCountBadgeTotal', function () {\n        return function (events) {\n            return events.filter(function (event) {\n                return event.incrementsBadgeTotal !== false;\n            }).length;\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarLimitTo', function () {\n        //Copied from the angular source. Only 1.4 has the begin functionality.\n        return function (input, limit, begin) {\n            if (Math.abs(Number(limit)) === Infinity) {\n                limit = Number(limit);\n            } else {\n                limit = parseInt(limit);\n            }\n            if (isNaN(limit)) {\n                return input;\n            }\n            if (angular.isNumber(input)) {\n                input = input.toString();\n            }\n            if (!angular.isArray(input) && !angular.isString(input)) {\n                return input;\n            }\n            begin = !begin || isNaN(begin) ? 0 : parseInt(begin);\n            begin = begin < 0 && begin >= -input.length ? input.length + begin : begin;\n            if (limit >= 0) {\n                return input.slice(begin, begin + limit);\n            } else {\n                if (begin === 0) {\n                    return input.slice(limit, input.length);\n                } else {\n                    return input.slice(Math.max(0, begin + limit), begin);\n                }\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', [\n        'moment',\n        function (moment) {\n            return {\n                templateUrl: 'src/templates/calendarYearView.html',\n                restrict: 'EA',\n                require: '^mwlCalendar',\n                scope: {\n                    events: '=calendarEvents',\n                    currentDay: '=calendarCurrentDay',\n                    eventClick: '=calendarEventClick',\n                    eventEditClick: '=calendarEditEventClick',\n                    eventDeleteClick: '=calendarDeleteEventClick',\n                    editEventHtml: '=calendarEditEventHtml',\n                    deleteEventHtml: '=calendarDeleteEventHtml',\n                    autoOpen: '=calendarAutoOpen',\n                    timespanClick: '=calendarTimespanClick'\n                },\n                controller: [\n                    '$scope',\n                    '$timeout',\n                    'calendarHelper',\n                    'eventCountBadgeTotalFilter',\n                    'calendarDebounce',\n                    function ($scope, $timeout, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n                        var vm = this;\n                        var firstRun = false;\n                        vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                        var updateView = calendarDebounce(function () {\n                            vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                            //Auto open the calendar to the current day if set\n                            if ($scope.autoOpen && !firstRun) {\n                                vm.view.forEach(function (month) {\n                                    if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                                        vm.monthClicked(month, true);\n                                        $timeout(function () {\n                                            firstRun = false;\n                                        });\n                                    }\n                                });\n                            }\n                        }, 50);\n                        $scope.$watch('currentDay', updateView);\n                        $scope.$watch('events', updateView, true);\n                        vm.monthClicked = function (month, monthClickedFirstRun) {\n                            if (!monthClickedFirstRun) {\n                                $scope.timespanClick({ calendarDate: month.date.toDate() });\n                            }\n                            vm.openEvents = month.events;\n                            vm.openRowIndex = null;\n                            if (vm.openEvents.length > 0) {\n                                var monthIndex = vm.view.indexOf(month);\n                                vm.openRowIndex = Math.floor(monthIndex / 4);\n                            }\n                        };\n                        vm.drillDown = function (month) {\n                            var date = moment($scope.currentDay).clone().month(month.date.month()).toDate();\n                            if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                                vm.calendarCtrl.changeView('month', date);\n                            }\n                        };\n                    }\n                ],\n                controllerAs: 'vm',\n                link: function (scope, element, attrs, calendarCtrl) {\n                    scope.vm.calendarCtrl = calendarCtrl;\n                }\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'src/templates/calendarWeekView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                timespanClick: '=calendarTimespanClick'\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'calendarDebounce',\n                function ($scope, moment, calendarHelper, calendarDebounce) {\n                    var updateView = calendarDebounce(function () {\n                        $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n                    }, 50);\n                    $scope.drillDown = function (day) {\n                        var date = moment($scope.currentDay).clone().date(day).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            $scope.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                }\n            ],\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'src/templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$sce',\n                function ($scope, $sce) {\n                    var vm = this;\n                    vm.$sce = $sce;\n                    var unbindWatcher = $scope.$watch('isOpen', function (isOpen) {\n                        vm.shouldCollapse = !isOpen;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            },\n            scope: {\n                isOpen: '=',\n                isMonthView: '=?',\n                isYearView: '=?',\n                events: '=',\n                eventClick: '=',\n                editEventHtml: '=',\n                eventEditClick: '=',\n                deleteEventHtml: '=',\n                eventDeleteClick: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'src/templates/calendarMonthView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                eventEditClick: '=calendarEditEventClick',\n                eventDeleteClick: '=calendarDeleteEventClick',\n                editEventHtml: '=calendarEditEventHtml',\n                deleteEventHtml: '=calendarDeleteEventHtml',\n                autoOpen: '=calendarAutoOpen',\n                timespanClick: '=calendarTimespanClick'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'eventCountBadgeTotalFilter',\n                'calendarDebounce',\n                function ($scope, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n                    var vm = this;\n                    var firstRun = false;\n                    vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                    var updateView = calendarDebounce(function () {\n                        vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n                        var rows = Math.floor(vm.view.length / 7);\n                        vm.monthOffsets = [];\n                        for (var i = 0; i < rows; i++) {\n                            vm.monthOffsets.push(i * 7);\n                        }\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && !firstRun) {\n                            vm.view.forEach(function (day) {\n                                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                                    vm.dayClicked(day, true);\n                                    $timeout(function () {\n                                        firstRun = false;\n                                    });\n                                }\n                            });\n                        }\n                    }, 50);\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                    vm.weekDays = calendarHelper.getWeekDayNames();\n                    vm.dayClicked = function (day, dayClickedFirstRun) {\n                        if (!dayClickedFirstRun) {\n                            $scope.timespanClick({ calendarDate: day.date.toDate() });\n                        }\n                        vm.view.forEach(function (monthDay) {\n                            monthDay.isOpened = false;\n                        });\n                        vm.openEvents = day.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var dayIndex = vm.view.indexOf(day);\n                            vm.openRowIndex = Math.floor(dayIndex / 7);\n                            day.isOpened = true;\n                        }\n                    };\n                    vm.drillDown = function (day) {\n                        var date = moment($scope.currentDay).clone().date(day.date.date()).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            vm.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                    vm.highlightEvent = function (event, shouldAddClass) {\n                        vm.view.forEach(function (day) {\n                            delete day.highlightClass;\n                            if (shouldAddClass) {\n                                var dayContainsEvent = day.events.indexOf(event) > -1;\n                                if (dayContainsEvent) {\n                                    day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                }\n                            }\n                        });\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'src/templates/calendarDayView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                eventLabel: '@calendarEventLabel',\n                timeLabel: '@calendarTimeLabel',\n                dayViewStart: '@calendarDayViewStart',\n                dayViewEnd: '@calendarDayViewEnd',\n                dayViewSplit: '@calendarDayViewSplit'\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                'calendarDebounce',\n                function ($scope, moment, calendarHelper, calendarConfig, calendarDebounce) {\n                    var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                    var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                    $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n                    $scope.dayHeight = 60 / $scope.dayViewSplit * 30;\n                    $scope.days = [];\n                    var dayCounter = moment(dayViewStart);\n                    for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                        $scope.days.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                        dayCounter.add(1, 'hour');\n                    }\n                    var updateView = calendarDebounce(function () {\n                        $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n                    }, 50);\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                }\n            ]\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'src/templates/calendar.html',\n            restrict: 'EA',\n            scope: {\n                events: '=calendarEvents',\n                view: '=calendarView',\n                currentDay: '=calendarCurrentDay',\n                control: '=calendarControl',\n                eventClick: '&calendarEventClick',\n                eventEditClick: '&calendarEditEventClick',\n                eventDeleteClick: '&calendarDeleteEventClick',\n                editEventHtml: '=calendarEditEventHtml',\n                deleteEventHtml: '=calendarDeleteEventHtml',\n                autoOpen: '=calendarAutoOpen',\n                useIsoWeek: '=calendarUseIsoWeek',\n                eventLabel: '@calendarEventLabel',\n                timeLabel: '@calendarTimeLabel',\n                dayViewStart: '@calendarDayViewStart',\n                dayViewEnd: '@calendarDayViewEnd',\n                weekTitleLabel: '@calendarWeekTitleLabel',\n                timespanClick: '&calendarTimespanClick',\n                dayViewSplit: '@calendarDayViewSplit'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarConfig',\n                function ($scope, $timeout, moment, calendarConfig) {\n                    var self = this;\n                    var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n                    this.titleFunctions = {\n                        day: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.day);\n                        },\n                        week: function (currentDay) {\n                            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n                        },\n                        month: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.month);\n                        },\n                        year: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.year);\n                        }\n                    };\n                    this.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = newDay;\n                    };\n                    $scope.control = $scope.control || {};\n                    $scope.control.prev = function () {\n                        $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n                    };\n                    $scope.control.next = function () {\n                        $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n                    };\n                    $scope.control.getTitle = function () {\n                        if (!self.titleFunctions[$scope.view]) {\n                            return '';\n                        }\n                        return self.titleFunctions[$scope.view]($scope.currentDay);\n                    };\n                    //Auto update the calendar when the locale changes\n                    var firstRunWatcher = true;\n                    var unbindWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, function (locale) {\n                        //Maintain backwards compatibility with the previous functionality of the calendar\n                        if ($scope.useIsoWeek === true) {\n                            moment.locale(locale, {\n                                week: {\n                                    dow: 1    //set monday as the first day of the week\n                                }\n                            });\n                        }\n                        if (firstRunWatcher) {\n                            //dont run the first time the calendar is initialised\n                            firstRunWatcher = false;\n                            return;\n                        }\n                        var originalView = angular.copy($scope.view);\n                        $scope.view = 'redraw';\n                        $timeout(function () {\n                            //bit of a hacky way to redraw the calendar, should be refactored at some point\n                            $scope.view = originalView;\n                        });\n                    });\n                    //Remove the watcher when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindDestroyListener();\n                        unbindWatcher();\n                    });\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .service('calendarHelper', function (moment, calendarConfig) {\n\n    var self = this;\n\n    function isISOWeekBasedOnLocale() {\n      return moment().startOf('week').day() === 1;\n    }\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n      });\n    }\n\n    this.getWeekDayNames = function() {\n\n      var weekdays = [];\n      var count = 0;\n      while(count < 7) {\n        weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n      }\n\n      return weekdays;\n\n    };\n\n    this.eventIsInPeriod = function(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventEnd);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    };\n\n    this.getYearView = function(events, currentDay) {\n\n      var view = [];\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n      var month = moment(currentDay).startOf('year');\n      var count = 0;\n      while (count < 12) {\n        var startPeriod = month.clone();\n        var endPeriod = startPeriod.clone().endOf('month');\n        view.push({\n          label: startPeriod.format(calendarConfig.dateFormats.month),\n          isToday: startPeriod.isSame(moment().startOf('month')),\n          events: eventsInPeriod.filter(function(event) {\n            return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n          }),\n          date: startPeriod\n        });\n\n        month.add(1, 'month');\n        count++;\n      }\n\n      return view;\n\n    };\n\n    this.getMonthView = function(events, currentDay) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n      var startOfMonth = moment(currentDay).startOf('month');\n      var day = startOfMonth.clone().startOf('week');\n      var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n      var view = [];\n      var today = moment().startOf('day');\n      while (day.isBefore(endOfMonthView)) {\n\n        var inMonth = day.month() === moment(currentDay).month();\n        var monthEvents = [];\n        if (inMonth) {\n          monthEvents = eventsInPeriod.filter(function(event) {\n            return self.eventIsInPeriod(event.starts_at, event.ends_at, day, day.clone().endOf('day'));\n          });\n        }\n\n        view.push({\n          label: day.date(),\n          date: day.clone(),\n          inMonth: inMonth,\n          isPast: today.isAfter(day),\n          isToday: today.isSame(day),\n          isFuture: today.isBefore(day),\n          isWeekend: [0, 6].indexOf(day.day()) > -1,\n          events: monthEvents\n        });\n\n        day.add(1, 'day');\n      }\n\n      return view;\n\n    };\n\n    this.getWeekView = function(events, currentDay) {\n\n      var dateOffset = isISOWeekBasedOnLocale() ? 1 : 0;\n      var columns = new Array(7);\n      var weekDays = self.getWeekDayNames();\n      var currentWeekDayIndex = currentDay.getDay();\n      var beginningOfWeek, endOfWeek, i, date;\n\n      for (i = currentWeekDayIndex; i >= 0; i--) {\n        date = moment(currentDay).subtract(currentWeekDayIndex - i, 'days').add(dateOffset, 'day').toDate();\n        columns[i] = {\n          weekDay: weekDays[i],\n          day: moment(date).format('D'),\n          date: moment(date).format(calendarConfig.dateFormats.day),\n          isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n          isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n          isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n          isWeekend: [0, 6].indexOf(moment(date).day()) > -1\n        };\n        if (i === 0) {\n          beginningOfWeek = date;\n        } else if (i === 6) {\n          endOfWeek = date;\n        }\n      }\n\n      for (i = currentWeekDayIndex + 1; i < 7; i++) {\n        date = moment(currentDay).add(i - currentWeekDayIndex, 'days').add(dateOffset, 'day').toDate();\n        columns[i] = {\n          weekDay: weekDays[i],\n          day: moment(date).format('D'),\n          date: moment(date).format(calendarConfig.dateFormats.day),\n          isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n          isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n          isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n          isWeekend: [0, 6].indexOf(moment(date).day()) > -1\n        };\n        if (i === 0) {\n          beginningOfWeek = date;\n        } else if (i === 6) {\n          endOfWeek = date;\n        }\n      }\n\n      endOfWeek = moment(endOfWeek).endOf('day').toDate();\n      beginningOfWeek = moment(beginningOfWeek).startOf('day').toDate();\n\n      var eventsSorted = events.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, beginningOfWeek, endOfWeek);\n      }).map(function(event) {\n\n        var eventStart = moment(event.starts_at).startOf('day');\n        var eventEnd = moment(event.ends_at).startOf('day');\n        var weekViewStart = moment(beginningOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n        return event;\n      });\n\n      return {columns: columns, events: eventsSorted};\n\n    };\n\n    this.getDayView = function(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n      var dayHeightMultiplier = dayHeight / 60;\n      var buckets = [];\n\n      return eventsInPeriod.filter(function(event) {\n        return self.eventIsInPeriod(\n          event.starts_at,\n          event.ends_at,\n          moment(currentDay).startOf('day').toDate(),\n          moment(currentDay).endOf('day').toDate()\n        );\n      }).map(function(event) {\n        if (moment(event.starts_at).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n        }\n\n        if (moment(event.ends_at).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.starts_at;\n          if (moment(event.starts_at).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) ||\n              self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .service('calendarDebounce', function($timeout) {\n\n    function debounce(func, wait, immediate) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        var later = function() {\n          timeout = null;\n          if (!immediate) {\n            func.apply(context, args);\n          }\n        };\n        var callNow = immediate && !timeout;\n        $timeout.cancel(timeout);\n        timeout = $timeout(later, wait);\n        if (callNow) {\n          func.apply(context, args);\n        }\n      };\n    }\n\n    return debounce;\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      weekDay: 'dddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var configProvider = this;\n\n    configProvider.configureDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.configureTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats\n      };\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('truncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('eventCountBadgeTotal', function() {\n\n    return function(events) {\n\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarLimitTo', function() {\n\n    //Copied from the angular source. Only 1.4 has the begin functionality.\n    return function(input, limit, begin) {\n      if (Math.abs(Number(limit)) === Infinity) {\n        limit = Number(limit);\n      } else {\n        limit = parseInt(limit);\n      }\n      if (isNaN(limit)) {\n        return input;\n      }\n\n      if (angular.isNumber(input)) {\n        input = input.toString();\n      }\n      if (!angular.isArray(input) && !angular.isString(input)) {\n        return input;\n      }\n\n      begin = (!begin || isNaN(begin)) ? 0 : parseInt(begin);\n      begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;\n\n      if (limit >= 0) {\n        return input.slice(begin, begin + limit);\n      } else {\n        if (begin === 0) {\n          return input.slice(limit, input.length);\n        } else {\n          return input.slice(Math.max(0, begin + limit), begin);\n        }\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function(moment) {\n\n    return {\n      templateUrl: 'src/templates/calendarYearView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventEditClick: '=calendarEditEventClick',\n        eventDeleteClick: '=calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, $timeout, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n\n        var vm = this;\n        var firstRun = false;\n\n        vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        var updateView = calendarDebounce(function() {\n          vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            vm.view.forEach(function(month) {\n              if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                vm.monthClicked(month, true);\n                $timeout(function() {\n                  firstRun = false;\n                });\n              }\n            });\n          }\n        }, 50);\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        vm.monthClicked = function(month, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.timespanClick({calendarDate: month.date.toDate()});\n          }\n\n          vm.openEvents = month.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var monthIndex = vm.view.indexOf(month);\n            vm.openRowIndex = Math.floor(monthIndex / 4);\n          }\n\n        };\n\n        vm.drillDown = function(month) {\n          var date = moment($scope.currentDay).clone().month(month.date.month()).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            vm.calendarCtrl.changeView('month', date);\n          }\n        };\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarWeekView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, moment, calendarHelper, calendarDebounce) {\n\n        var updateView = calendarDebounce(function() {\n          $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n        }, 50);\n\n        $scope.drillDown = function(day) {\n          var date = moment($scope.currentDay).clone().date(day).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            $scope.calendarCtrl.changeView('day', date);\n          }\n        };\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n      },\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'src/templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $sce) {\n\n        var vm = this;\n        vm.$sce = $sce;\n\n        var unbindWatcher = $scope.$watch('isOpen', function(isOpen) {\n          vm.shouldCollapse = !isOpen;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      controllerAs: 'vm',\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      },\n      scope: {\n        isOpen: '=',\n        isMonthView: '=?',\n        isYearView: '=?',\n        events: '=',\n        eventClick: '=',\n        editEventHtml: '=',\n        eventEditClick: '=',\n        deleteEventHtml: '=',\n        eventDeleteClick: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarMonthView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventEditClick: '=calendarEditEventClick',\n        eventDeleteClick: '=calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n\n        var vm = this;\n        var firstRun = false;\n\n        vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        var updateView = calendarDebounce(function() {\n          vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n          var rows = Math.floor(vm.view.length / 7);\n          vm.monthOffsets = [];\n          for (var i = 0; i < rows; i++) {\n            vm.monthOffsets.push(i * 7);\n          }\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            vm.view.forEach(function(day) {\n              if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                vm.dayClicked(day, true);\n                $timeout(function() {\n                  firstRun = false;\n                });\n              }\n            });\n          }\n\n        }, 50);\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        vm.weekDays = calendarHelper.getWeekDayNames();\n\n        vm.dayClicked = function(day, dayClickedFirstRun) {\n\n          if (!dayClickedFirstRun) {\n            $scope.timespanClick({calendarDate: day.date.toDate()});\n          }\n\n          vm.view.forEach(function(monthDay) {\n            monthDay.isOpened = false;\n          });\n\n          vm.openEvents = day.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var dayIndex = vm.view.indexOf(day);\n            vm.openRowIndex = Math.floor(dayIndex / 7);\n            day.isOpened = true;\n          }\n\n        };\n\n        vm.drillDown = function(day) {\n          var date = moment($scope.currentDay).clone().date(day.date.date()).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            vm.calendarCtrl.changeView('day', date);\n          }\n        };\n\n        vm.highlightEvent = function(event, shouldAddClass) {\n\n          vm.view.forEach(function(day) {\n            delete day.highlightClass;\n            if (shouldAddClass) {\n              var dayContainsEvent = day.events.indexOf(event) > -1;\n              if (dayContainsEvent) {\n                day.highlightClass = 'day-highlight dh-event-' + event.type;\n              }\n            }\n          });\n\n        };\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarDayView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventLabel: '@calendarEventLabel',\n        timeLabel: '@calendarTimeLabel',\n        dayViewStart: '@calendarDayViewStart',\n        dayViewEnd: '@calendarDayViewEnd',\n        dayViewSplit: '@calendarDayViewSplit'\n      },\n      controller: function($scope, moment, calendarHelper, calendarConfig, calendarDebounce) {\n\n        var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n        var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n\n        $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n        $scope.dayHeight = (60 / $scope.dayViewSplit) * 30;\n\n        $scope.days = [];\n        var dayCounter = moment(dayViewStart);\n        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n          $scope.days.push({\n            label: dayCounter.format(calendarConfig.dateFormats.hour)\n          });\n          dayCounter.add(1, 'hour');\n        }\n\n        var updateView = calendarDebounce(function() {\n          $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n        }, 50);\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'src/templates/calendar.html',\n      restrict: 'EA',\n      scope: {\n        events: '=calendarEvents',\n        view: '=calendarView',\n        currentDay: '=calendarCurrentDay',\n        control: '=calendarControl',\n        eventClick: '&calendarEventClick',\n        eventEditClick: '&calendarEditEventClick',\n        eventDeleteClick: '&calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        useIsoWeek: '=calendarUseIsoWeek',\n        eventLabel: '@calendarEventLabel',\n        timeLabel: '@calendarTimeLabel',\n        dayViewStart: '@calendarDayViewStart',\n        dayViewEnd: '@calendarDayViewEnd',\n        weekTitleLabel: '@calendarWeekTitleLabel',\n        timespanClick: '&calendarTimespanClick',\n        dayViewSplit: '@calendarDayViewSplit'\n      },\n      controller: function($scope, $timeout, moment, calendarConfig) {\n\n        var self = this;\n\n        var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n        this.titleFunctions = {\n          day: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.day);\n          },\n          week: function(currentDay) {\n            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n          },\n          month: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.month);\n          },\n          year: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.year);\n          }\n        };\n\n        this.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = newDay;\n        };\n\n        $scope.control = $scope.control || {};\n\n        $scope.control.prev = function() {\n          $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n        };\n\n        $scope.control.next = function() {\n          $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n        };\n\n        $scope.control.getTitle = function() {\n          if (!self.titleFunctions[$scope.view]) {\n            return '';\n          }\n          return self.titleFunctions[$scope.view]($scope.currentDay);\n        };\n\n        //Auto update the calendar when the locale changes\n        var firstRunWatcher = true;\n        var unbindWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, function(locale) {\n\n          //Maintain backwards compatibility with the previous functionality of the calendar\n          if ($scope.useIsoWeek === true) {\n            moment.locale(locale, {\n              week: {\n                dow: 1 //set monday as the first day of the week\n              }\n            });\n          }\n\n          if (firstRunWatcher) { //dont run the first time the calendar is initialised\n            firstRunWatcher = false;\n            return;\n          }\n          var originalView = angular.copy($scope.view);\n          $scope.view = 'redraw';\n          $timeout(function() { //bit of a hacky way to redraw the calendar, should be refactored at some point\n            $scope.view = originalView;\n          });\n        });\n\n        //Remove the watcher when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindDestroyListener();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}