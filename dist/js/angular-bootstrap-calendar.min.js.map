{"version":3,"sources":["angular-bootstrap-calendar.js","services/calendarHelper.js","services/calendarDebounce.js","services/calendarConfig.js","filters/truncateEventTitle.js","filters/eventCountBadgeTotal.js","filters/calendarLimitTo.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","angular","module","getEventsInPeriod","calendarDate","period","allEvents","moment","calendarConfig","startPeriod","eventIsInPeriod","eventStart","eventEnd","periodStart","endOf","filter","event","starts_at","ends_at","endPeriod","periodEnd","getWeekDayNames","weekdays","dateFormats","isAfter","isBefore","isSame","count","getYearView","view","eventsInPeriod","currentDay","weekDay","month","events","label","format","isToday","clone","date","startOf","startOfMonth","endOfMonthView","today","day","monthEvents","inMonth","isFuture","isWeekend","isPast","indexOf","add","getWeekView","endOfWeek","days","length","weekDayLabel","dayCounter","dayLabel","eventsSorted","offset","startOfWeek","map","span","diff","weekViewStart","weekViewEnd","daySpan","dayOffset","calendarStart","calendarEnd","buckets","dayStartHour","dayEndHour","dayHeight","calendarHeight","dayHeightMultiplier","toDate","top","height","diffStart","forEach","bucket","self","canFitInThisBucket","cannotFitInABucket","getMonthView","bucketIndex","bucketItem","left","push","getDayView","service","args","$timeout","debounce","immediate","timeout","context","this","arguments","callNow","cancel","apply","later","wait","func","hour","provider","defaultTitleFormats","week","year","configProvider","formats","extend","defaultDateFormats","titleFormats","$get","string","boxHeight","substr","incrementsBadgeTotal","limit","begin","Infinity","Math","abs","input","Number","toString","isNaN","slice","directive","max","controller","$injector","has","restrict","$scope","$attrs","$element","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","unbindDestroy","addClass","removeClass","$on","templateUrl","eventClick","eventEditClick","require","eventDeleteClick","scope","deleteEventHtml","autoOpen","timespanClick","editEventHtml","calendarHelper","eventCountBadgeTotalFilter","calendarDebounce","vm","firstRun","updateView","monthClicked","openEvents","openRowIndex","monthClickedFirstRun","floor","monthIndex","drillDown","calendarCtrl","changeView","attrs","controllerAs","replace","$sce","isOpen","isMonthView","link","elm","ctrls","monthOffsets","i","dayClicked","monthDay","weekDays","dayClickedFirstRun","dayIndex","highlightEvent","highlightClass","shouldAddClass","dayContainsEvent","type","eventLabel","timeLabel","dayViewEnd","dayViewSplit","dayViewStart","parseInt","hours","useIsoWeek","weekTitleLabel","titleFunctions","newDay","control","getTitle","subtract","next","firstRunWatcher","locale","dow","originalView","copy","unbindDestroyListener"],"mappings":"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","file":"angular-bootstrap-calendar.min.js","sourcesContent":["/**\n * angular-bootstrap-calendar - A pure AngularJS bootstrap themed responsive calendar that can display events and has views for year, month, week and day\n * @version v0.9.2\n * @link https://github.com/mattlewis92/angular-bootstrap-calendar\n * @license MIT\n */\n(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    'use strict';\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarHelper', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                });\n            }\n            function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventEnd);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            }\n            function getWeekDayNames() {\n                var weekdays = [];\n                var count = 0;\n                while (count < 7) {\n                    weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            }\n            function getYearView(events, currentDay) {\n                var view = [];\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                var month = moment(currentDay).startOf('year');\n                var count = 0;\n                while (count < 12) {\n                    var startPeriod = month.clone();\n                    var endPeriod = startPeriod.clone().endOf('month');\n                    view.push({\n                        label: startPeriod.format(calendarConfig.dateFormats.month),\n                        isToday: startPeriod.isSame(moment().startOf('month')),\n                        events: eventsInPeriod.filter(function (event) {\n                            return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                        }),\n                        date: startPeriod\n                    });\n                    month.add(1, 'month');\n                    count++;\n                }\n                return view;\n            }\n            function getMonthView(events, currentDay) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var startOfMonth = moment(currentDay).startOf('month');\n                var day = startOfMonth.clone().startOf('week');\n                var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n                var view = [];\n                var today = moment().startOf('day');\n                while (day.isBefore(endOfMonthView)) {\n                    var inMonth = day.month() === moment(currentDay).month();\n                    var monthEvents = [];\n                    if (inMonth) {\n                        monthEvents = eventsInPeriod.filter(function (event) {\n                            return eventIsInPeriod(event.starts_at, event.ends_at, day, day.clone().endOf('day'));\n                        });\n                    }\n                    view.push({\n                        label: day.date(),\n                        date: day.clone(),\n                        inMonth: inMonth,\n                        isPast: today.isAfter(day),\n                        isToday: today.isSame(day),\n                        isFuture: today.isBefore(day),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(day.day()) > -1,\n                        events: monthEvents\n                    });\n                    day.add(1, 'day');\n                }\n                return view;\n            }\n            function getWeekView(events, currentDay) {\n                var startOfWeek = moment(currentDay).startOf('week');\n                var endOfWeek = moment(currentDay).endOf('week');\n                var dayCounter = startOfWeek.clone();\n                var days = [];\n                var today = moment().startOf('day');\n                while (days.length < 7) {\n                    days.push({\n                        weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n                        date: dayCounter.clone(),\n                        dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n                        isPast: dayCounter.isBefore(today),\n                        isToday: dayCounter.isSame(today),\n                        isFuture: dayCounter.isAfter(today),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(dayCounter.day()) > -1\n                    });\n                    dayCounter.add(1, 'day');\n                }\n                var eventsSorted = events.filter(function (event) {\n                    return eventIsInPeriod(event.starts_at, event.ends_at, startOfWeek, endOfWeek);\n                }).map(function (event) {\n                    var eventStart = moment(event.starts_at).startOf('day');\n                    var eventEnd = moment(event.ends_at).startOf('day');\n                    var weekViewStart = moment(startOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    days: days,\n                    events: eventsSorted\n                };\n            }\n            function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n                var dayHeightMultiplier = dayHeight / 60;\n                var buckets = [];\n                return eventsInPeriod.filter(function (event) {\n                    return eventIsInPeriod(event.starts_at, event.ends_at, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                }).map(function (event) {\n                    if (moment(event.starts_at).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier - 2;\n                    }\n                    if (moment(event.ends_at).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.starts_at;\n                        if (moment(event.starts_at).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) || self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            }\n            return {\n                getWeekDayNames: getWeekDayNames,\n                getYearView: getYearView,\n                getMonthView: getMonthView,\n                getWeekView: getWeekView,\n                getDayView: getDayView\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').service('calendarDebounce', [\n        '$timeout',\n        function ($timeout) {\n            function debounce(func, wait, immediate) {\n                var timeout;\n                return function () {\n                    var context = this, args = arguments;\n                    var later = function () {\n                        timeout = null;\n                        if (!immediate) {\n                            func.apply(context, args);\n                        }\n                    };\n                    var callNow = immediate && !timeout;\n                    $timeout.cancel(timeout);\n                    timeout = $timeout(later, wait);\n                    if (callNow) {\n                        func.apply(context, args);\n                    }\n                };\n            }\n            return debounce;\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            weekDay: 'dddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var configProvider = this;\n        configProvider.configureDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.configureTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('truncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('eventCountBadgeTotal', function () {\n        return function (events) {\n            return events.filter(function (event) {\n                return event.incrementsBadgeTotal !== false;\n            }).length;\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarLimitTo', function () {\n        //Copied from the angular source. Only 1.4 has the begin functionality.\n        return function (input, limit, begin) {\n            if (Math.abs(Number(limit)) === Infinity) {\n                limit = Number(limit);\n            } else {\n                limit = parseInt(limit);\n            }\n            if (isNaN(limit)) {\n                return input;\n            }\n            if (angular.isNumber(input)) {\n                input = input.toString();\n            }\n            if (!angular.isArray(input) && !angular.isString(input)) {\n                return input;\n            }\n            begin = !begin || isNaN(begin) ? 0 : parseInt(begin);\n            begin = begin < 0 && begin >= -input.length ? input.length + begin : begin;\n            if (limit >= 0) {\n                return input.slice(begin, begin + limit);\n            } else {\n                if (begin === 0) {\n                    return input.slice(limit, input.length);\n                } else {\n                    return input.slice(Math.max(0, begin + limit), begin);\n                }\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', function () {\n        return {\n            templateUrl: 'src/templates/calendarYearView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                eventClick: '=',\n                eventEditClick: '=',\n                eventDeleteClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                timespanClick: '='\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'eventCountBadgeTotalFilter',\n                'calendarDebounce',\n                function ($scope, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n                    var vm = this;\n                    var firstRun = false;\n                    vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                    var updateView = calendarDebounce(function () {\n                        vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && !firstRun) {\n                            vm.view.forEach(function (month) {\n                                if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                                    vm.monthClicked(month, true);\n                                    $timeout(function () {\n                                        firstRun = false;\n                                    });\n                                }\n                            });\n                        }\n                    }, 50);\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                    vm.monthClicked = function (month, monthClickedFirstRun) {\n                        if (!monthClickedFirstRun) {\n                            $scope.timespanClick({ calendarDate: month.date.toDate() });\n                        }\n                        vm.openEvents = month.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var monthIndex = vm.view.indexOf(month);\n                            vm.openRowIndex = Math.floor(monthIndex / 4);\n                        }\n                    };\n                    vm.drillDown = function (month) {\n                        var date = moment($scope.currentDay).clone().month(month.date.month()).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            vm.calendarCtrl.changeView('month', date);\n                        }\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'src/templates/calendarWeekView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                eventClick: '=',\n                timespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'calendarDebounce',\n                function ($scope, moment, calendarHelper, calendarDebounce) {\n                    var vm = this;\n                    var updateView = calendarDebounce(function () {\n                        $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n                    }, 50);\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                    vm.drillDown = function (day) {\n                        var date = day.date.toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            vm.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'src/templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$sce',\n                function ($scope, $sce) {\n                    var vm = this;\n                    vm.$sce = $sce;\n                    var unbindWatcher = $scope.$watch('isOpen', function (isOpen) {\n                        vm.shouldCollapse = !isOpen;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            },\n            scope: {\n                isOpen: '=',\n                events: '=',\n                eventClick: '=',\n                editEventHtml: '=',\n                eventEditClick: '=',\n                deleteEventHtml: '=',\n                eventDeleteClick: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'src/templates/calendarMonthView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                eventClick: '=',\n                eventEditClick: '=',\n                eventDeleteClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                timespanClick: '='\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'eventCountBadgeTotalFilter',\n                'calendarDebounce',\n                function ($scope, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n                    var vm = this;\n                    var firstRun = false;\n                    vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                    var updateView = calendarDebounce(function () {\n                        vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n                        var rows = Math.floor(vm.view.length / 7);\n                        vm.monthOffsets = [];\n                        for (var i = 0; i < rows; i++) {\n                            vm.monthOffsets.push(i * 7);\n                        }\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && !firstRun) {\n                            vm.view.forEach(function (day) {\n                                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                                    vm.dayClicked(day, true);\n                                    $timeout(function () {\n                                        firstRun = false;\n                                    });\n                                }\n                            });\n                        }\n                    }, 50);\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                    vm.weekDays = calendarHelper.getWeekDayNames();\n                    vm.dayClicked = function (day, dayClickedFirstRun) {\n                        if (!dayClickedFirstRun) {\n                            $scope.timespanClick({ calendarDate: day.date.toDate() });\n                        }\n                        vm.view.forEach(function (monthDay) {\n                            monthDay.isOpened = false;\n                        });\n                        vm.openEvents = day.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var dayIndex = vm.view.indexOf(day);\n                            vm.openRowIndex = Math.floor(dayIndex / 7);\n                            day.isOpened = true;\n                        }\n                    };\n                    vm.drillDown = function (day) {\n                        var date = moment($scope.currentDay).clone().date(day.date.date()).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            vm.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                    vm.highlightEvent = function (event, shouldAddClass) {\n                        vm.view.forEach(function (day) {\n                            delete day.highlightClass;\n                            if (shouldAddClass) {\n                                var dayContainsEvent = day.events.indexOf(event) > -1;\n                                if (dayContainsEvent) {\n                                    day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                }\n                            }\n                        });\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'src/templates/calendarDayView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                eventClick: '=',\n                eventLabel: '@',\n                timeLabel: '@',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                'calendarDebounce',\n                function ($scope, moment, calendarHelper, calendarConfig, calendarDebounce) {\n                    var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                    var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                    $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n                    $scope.dayHeight = 60 / $scope.dayViewSplit * 30;\n                    $scope.days = [];\n                    var dayCounter = moment(dayViewStart);\n                    for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                        $scope.days.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                        dayCounter.add(1, 'hour');\n                    }\n                    var updateView = calendarDebounce(function () {\n                        $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n                    }, 50);\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                }\n            ]\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'src/templates/calendar.html',\n            restrict: 'EA',\n            scope: {\n                events: '=',\n                view: '=',\n                currentDay: '=',\n                control: '=',\n                eventClick: '&',\n                eventEditClick: '&',\n                eventDeleteClick: '&',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                useIsoWeek: '=',\n                eventLabel: '@',\n                timeLabel: '@',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                weekTitleLabel: '@',\n                timespanClick: '&',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarConfig',\n                function ($scope, $timeout, moment, calendarConfig) {\n                    var self = this;\n                    var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n                    this.titleFunctions = {\n                        day: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.day);\n                        },\n                        week: function (currentDay) {\n                            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n                        },\n                        month: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.month);\n                        },\n                        year: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.year);\n                        }\n                    };\n                    this.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = newDay;\n                    };\n                    $scope.control = $scope.control || {};\n                    $scope.control.prev = function () {\n                        $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n                    };\n                    $scope.control.next = function () {\n                        $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n                    };\n                    $scope.control.getTitle = function () {\n                        if (!self.titleFunctions[$scope.view]) {\n                            return '';\n                        }\n                        return self.titleFunctions[$scope.view]($scope.currentDay);\n                    };\n                    //Auto update the calendar when the locale changes\n                    var firstRunWatcher = true;\n                    var unbindWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, function (locale) {\n                        //Maintain backwards compatibility with the previous functionality of the calendar\n                        if ($scope.useIsoWeek === true) {\n                            moment.locale(locale, {\n                                week: {\n                                    dow: 1    //set monday as the first day of the week\n                                }\n                            });\n                        }\n                        if (firstRunWatcher) {\n                            //dont run the first time the calendar is initialised\n                            firstRunWatcher = false;\n                            return;\n                        }\n                        var originalView = angular.copy($scope.view);\n                        $scope.view = 'redraw';\n                        $timeout(function () {\n                            //bit of a hacky way to redraw the calendar, should be refactored at some point\n                            $scope.view = originalView;\n                        });\n                    });\n                    //Remove the watcher when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindDestroyListener();\n                        unbindWatcher();\n                    });\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarHelper', function (moment, calendarConfig) {\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n      });\n    }\n\n    function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventEnd);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    }\n\n    function getWeekDayNames() {\n      var weekdays = [];\n      var count = 0;\n      while(count < 7) {\n        weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n      }\n      return weekdays;\n    }\n\n    function getYearView(events, currentDay) {\n\n      var view = [];\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n      var month = moment(currentDay).startOf('year');\n      var count = 0;\n      while (count < 12) {\n        var startPeriod = month.clone();\n        var endPeriod = startPeriod.clone().endOf('month');\n        view.push({\n          label: startPeriod.format(calendarConfig.dateFormats.month),\n          isToday: startPeriod.isSame(moment().startOf('month')),\n          events: eventsInPeriod.filter(function(event) {\n            return eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n          }),\n          date: startPeriod\n        });\n\n        month.add(1, 'month');\n        count++;\n      }\n\n      return view;\n\n    }\n\n    function getMonthView(events, currentDay) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n      var startOfMonth = moment(currentDay).startOf('month');\n      var day = startOfMonth.clone().startOf('week');\n      var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n      var view = [];\n      var today = moment().startOf('day');\n      while (day.isBefore(endOfMonthView)) {\n\n        var inMonth = day.month() === moment(currentDay).month();\n        var monthEvents = [];\n        if (inMonth) {\n          monthEvents = eventsInPeriod.filter(function(event) {\n            return eventIsInPeriod(event.starts_at, event.ends_at, day, day.clone().endOf('day'));\n          });\n        }\n\n        view.push({\n          label: day.date(),\n          date: day.clone(),\n          inMonth: inMonth,\n          isPast: today.isAfter(day),\n          isToday: today.isSame(day),\n          isFuture: today.isBefore(day),\n          isWeekend: [0, 6].indexOf(day.day()) > -1,\n          events: monthEvents\n        });\n\n        day.add(1, 'day');\n      }\n\n      return view;\n\n    }\n\n    function getWeekView(events, currentDay) {\n\n      var startOfWeek = moment(currentDay).startOf('week');\n      var endOfWeek = moment(currentDay).endOf('week');\n      var dayCounter = startOfWeek.clone();\n      var days = [];\n      var today = moment().startOf('day');\n      while(days.length < 7) {\n        days.push({\n          weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n          date: dayCounter.clone(),\n          dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n          isPast: dayCounter.isBefore(today),\n          isToday: dayCounter.isSame(today),\n          isFuture: dayCounter.isAfter(today),\n          isWeekend: [0, 6].indexOf(dayCounter.day()) > -1\n        });\n        dayCounter.add(1, 'day');\n      }\n\n      var eventsSorted = events.filter(function(event) {\n        return eventIsInPeriod(event.starts_at, event.ends_at, startOfWeek, endOfWeek);\n      }).map(function(event) {\n\n        var eventStart = moment(event.starts_at).startOf('day');\n        var eventEnd = moment(event.ends_at).startOf('day');\n        var weekViewStart = moment(startOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n\n        return event;\n      });\n\n      return {days: days, events: eventsSorted};\n\n    }\n\n    function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n      var dayHeightMultiplier = dayHeight / 60;\n      var buckets = [];\n\n      return eventsInPeriod.filter(function(event) {\n        return eventIsInPeriod(\n          event.starts_at,\n          event.ends_at,\n          moment(currentDay).startOf('day').toDate(),\n          moment(currentDay).endOf('day').toDate()\n        );\n      }).map(function(event) {\n        if (moment(event.starts_at).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n        }\n\n        if (moment(event.ends_at).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.starts_at;\n          if (moment(event.starts_at).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) ||\n              self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    }\n\n    return {\n      getWeekDayNames: getWeekDayNames,\n      getYearView: getYearView,\n      getMonthView: getMonthView,\n      getWeekView: getWeekView,\n      getDayView: getDayView\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .service('calendarDebounce', function($timeout) {\n\n    function debounce(func, wait, immediate) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        var later = function() {\n          timeout = null;\n          if (!immediate) {\n            func.apply(context, args);\n          }\n        };\n        var callNow = immediate && !timeout;\n        $timeout.cancel(timeout);\n        timeout = $timeout(later, wait);\n        if (callNow) {\n          func.apply(context, args);\n        }\n      };\n    }\n\n    return debounce;\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      weekDay: 'dddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var configProvider = this;\n\n    configProvider.configureDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.configureTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats\n      };\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('truncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('eventCountBadgeTotal', function() {\n\n    return function(events) {\n\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarLimitTo', function() {\n\n    //Copied from the angular source. Only 1.4 has the begin functionality.\n    return function(input, limit, begin) {\n      if (Math.abs(Number(limit)) === Infinity) {\n        limit = Number(limit);\n      } else {\n        limit = parseInt(limit);\n      }\n      if (isNaN(limit)) {\n        return input;\n      }\n\n      if (angular.isNumber(input)) {\n        input = input.toString();\n      }\n      if (!angular.isArray(input) && !angular.isString(input)) {\n        return input;\n      }\n\n      begin = (!begin || isNaN(begin)) ? 0 : parseInt(begin);\n      begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;\n\n      if (limit >= 0) {\n        return input.slice(begin, begin + limit);\n      } else {\n        if (begin === 0) {\n          return input.slice(limit, input.length);\n        } else {\n          return input.slice(Math.max(0, begin + limit), begin);\n        }\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarYearView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        eventClick: '=',\n        eventEditClick: '=',\n        eventDeleteClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        timespanClick: '='\n      },\n      controller: function($scope, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n\n        var vm = this;\n        var firstRun = false;\n\n        vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        var updateView = calendarDebounce(function() {\n          vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            vm.view.forEach(function(month) {\n              if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                vm.monthClicked(month, true);\n                $timeout(function() {\n                  firstRun = false;\n                });\n              }\n            });\n          }\n        }, 50);\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        vm.monthClicked = function(month, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.timespanClick({calendarDate: month.date.toDate()});\n          }\n\n          vm.openEvents = month.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var monthIndex = vm.view.indexOf(month);\n            vm.openRowIndex = Math.floor(monthIndex / 4);\n          }\n\n        };\n\n        vm.drillDown = function(month) {\n          var date = moment($scope.currentDay).clone().month(month.date.month()).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            vm.calendarCtrl.changeView('month', date);\n          }\n        };\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarWeekView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        eventClick: '=',\n        timespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper, calendarDebounce) {\n\n        var vm = this;\n\n        var updateView = calendarDebounce(function() {\n          $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n        }, 50);\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        vm.drillDown = function(day) {\n          var date = day.date.toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            vm.calendarCtrl.changeView('day', date);\n          }\n        };\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'src/templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $sce) {\n\n        var vm = this;\n        vm.$sce = $sce;\n\n        var unbindWatcher = $scope.$watch('isOpen', function(isOpen) {\n          vm.shouldCollapse = !isOpen;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      controllerAs: 'vm',\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      },\n      scope: {\n        isOpen: '=',\n        events: '=',\n        eventClick: '=',\n        editEventHtml: '=',\n        eventEditClick: '=',\n        deleteEventHtml: '=',\n        eventDeleteClick: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarMonthView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        eventClick: '=',\n        eventEditClick: '=',\n        eventDeleteClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        timespanClick: '='\n      },\n      controller: function($scope, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter, calendarDebounce) {\n\n        var vm = this;\n        var firstRun = false;\n\n        vm.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        var updateView = calendarDebounce(function() {\n          vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n          var rows = Math.floor(vm.view.length / 7);\n          vm.monthOffsets = [];\n          for (var i = 0; i < rows; i++) {\n            vm.monthOffsets.push(i * 7);\n          }\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            vm.view.forEach(function(day) {\n              if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                vm.dayClicked(day, true);\n                $timeout(function() {\n                  firstRun = false;\n                });\n              }\n            });\n          }\n\n        }, 50);\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        vm.weekDays = calendarHelper.getWeekDayNames();\n\n        vm.dayClicked = function(day, dayClickedFirstRun) {\n\n          if (!dayClickedFirstRun) {\n            $scope.timespanClick({calendarDate: day.date.toDate()});\n          }\n\n          vm.view.forEach(function(monthDay) {\n            monthDay.isOpened = false;\n          });\n\n          vm.openEvents = day.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var dayIndex = vm.view.indexOf(day);\n            vm.openRowIndex = Math.floor(dayIndex / 7);\n            day.isOpened = true;\n          }\n\n        };\n\n        vm.drillDown = function(day) {\n          var date = moment($scope.currentDay).clone().date(day.date.date()).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            vm.calendarCtrl.changeView('day', date);\n          }\n        };\n\n        vm.highlightEvent = function(event, shouldAddClass) {\n\n          vm.view.forEach(function(day) {\n            delete day.highlightClass;\n            if (shouldAddClass) {\n              var dayContainsEvent = day.events.indexOf(event) > -1;\n              if (dayContainsEvent) {\n                day.highlightClass = 'day-highlight dh-event-' + event.type;\n              }\n            }\n          });\n\n        };\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarDayView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        eventClick: '=',\n        eventLabel: '@',\n        timeLabel: '@',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, moment, calendarHelper, calendarConfig, calendarDebounce) {\n\n        var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n        var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n\n        $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n        $scope.dayHeight = (60 / $scope.dayViewSplit) * 30;\n\n        $scope.days = [];\n        var dayCounter = moment(dayViewStart);\n        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n          $scope.days.push({\n            label: dayCounter.format(calendarConfig.dateFormats.hour)\n          });\n          dayCounter.add(1, 'hour');\n        }\n\n        var updateView = calendarDebounce(function() {\n          $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n        }, 50);\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'src/templates/calendar.html',\n      restrict: 'EA',\n      scope: {\n        events: '=',\n        view: '=',\n        currentDay: '=',\n        control: '=',\n        eventClick: '&',\n        eventEditClick: '&',\n        eventDeleteClick: '&',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        useIsoWeek: '=',\n        eventLabel: '@',\n        timeLabel: '@',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        weekTitleLabel: '@',\n        timespanClick: '&',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, $timeout, moment, calendarConfig) {\n\n        var self = this;\n\n        var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n        this.titleFunctions = {\n          day: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.day);\n          },\n          week: function(currentDay) {\n            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n          },\n          month: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.month);\n          },\n          year: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.year);\n          }\n        };\n\n        this.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = newDay;\n        };\n\n        $scope.control = $scope.control || {};\n\n        $scope.control.prev = function() {\n          $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n        };\n\n        $scope.control.next = function() {\n          $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n        };\n\n        $scope.control.getTitle = function() {\n          if (!self.titleFunctions[$scope.view]) {\n            return '';\n          }\n          return self.titleFunctions[$scope.view]($scope.currentDay);\n        };\n\n        //Auto update the calendar when the locale changes\n        var firstRunWatcher = true;\n        var unbindWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, function(locale) {\n\n          //Maintain backwards compatibility with the previous functionality of the calendar\n          if ($scope.useIsoWeek === true) {\n            moment.locale(locale, {\n              week: {\n                dow: 1 //set monday as the first day of the week\n              }\n            });\n          }\n\n          if (firstRunWatcher) { //dont run the first time the calendar is initialised\n            firstRunWatcher = false;\n            return;\n          }\n          var originalView = angular.copy($scope.view);\n          $scope.view = 'redraw';\n          $timeout(function() { //bit of a hacky way to redraw the calendar, should be refactored at some point\n            $scope.view = originalView;\n          });\n        });\n\n        //Remove the watcher when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindDestroyListener();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}